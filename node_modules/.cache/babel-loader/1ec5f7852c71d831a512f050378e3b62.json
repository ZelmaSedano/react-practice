{"ast":null,"code":"var _jsxFileName = \"/Users/zelmasedano/Desktop/1_Techtonica/4) Practice/2_React_Practice/react-practice/src/components/Button.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './button.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Button(props) {\n  _s();\n\n  const [isClicked, setisClicked] = useState(false); // false is the default\n  // create a variable to hold toggling color effect\n  // when true(clicked) = pink, when false = lightGray\n\n  const background = isClicked ? 'pink' : 'lightGray'; // return statement - can be only one\n\n  return (\n    /*#__PURE__*/\n    // opening tag\n    // change event to 'onClick'\n    _jsxDEV(\"button\", {\n      style: {\n        backgroundColor: background\n      },\n      onClick: () => setisClicked(!isClicked),\n      children: [\"Button number\", props.number]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }, this) // closing tag\n\n  );\n}\n\n_s(Button, \"WcIWaOvAkplGnsjQTMvoksT9OPc=\");\n\n_c = Button;\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/zelmasedano/Desktop/1_Techtonica/4) Practice/2_React_Practice/react-practice/src/components/Button.js"],"names":["React","useState","Button","props","isClicked","setisClicked","background","backgroundColor","number"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,cAAP;;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAAA;;AACrB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C,CADqB,CAErB;AAEA;AACA;;AACA,QAAMK,UAAU,GAAGF,SAAS,GAAG,MAAH,GAAY,WAAxC,CANqB,CAOrB;;AACA;AAAA;AACE;AACA;AACA;AACE,MAAA,KAAK,EAAE;AAAEG,QAAAA,eAAe,EAAED;AAAnB,OADT;AAEE,MAAA,OAAO,EAAE,MAAMD,YAAY,CAAC,CAACD,SAAF,CAF7B;AAAA,kCAIgBD,KAAK,CAACK,MAJtB;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,CASE;;AATF;AAWD;;GAnBQN,M;;KAAAA,M;AAqBT,eAAeA,MAAf","sourcesContent":["import React, { useState } from 'react';\nimport './button.css';\n\nfunction Button(props) {\n  const [isClicked, setisClicked] = useState(false);\n  // false is the default\n\n  // create a variable to hold toggling color effect\n  // when true(clicked) = pink, when false = lightGray\n  const background = isClicked ? 'pink' : 'lightGray';\n  // return statement - can be only one\n  return (\n    // opening tag\n    // change event to 'onClick'\n    <button\n      style={{ backgroundColor: background }}\n      onClick={() => setisClicked(!isClicked)}\n    >\n      Button number{props.number}\n    </button>\n    // closing tag\n  );\n}\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}